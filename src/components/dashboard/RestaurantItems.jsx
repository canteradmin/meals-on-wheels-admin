import React, { useState, useEffect } from "react";
import AddItemModal from "./AddItemModal";
import {
  menuAPI,
  handleAPIError,
  formatMenuItemData,
} from "../../services/api";
import "./RestaurantItems.scss";

const RestaurantItems = () => {
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [items, setItems] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");
  const [filterCategory, setFilterCategory] = useState("all");
  const [filterAvailability, setFilterAvailability] = useState("all");
  const [searchTerm, setSearchTerm] = useState("");

  useEffect(() => {
    fetchMenuItems();
  }, []);

  const fetchMenuItems = async () => {
    try {
      setLoading(true);
      setError("");

      const response = await menuAPI.getMenu();
      const formattedItems = (response.data || []).map(formatMenuItemData);
      setItems(formattedItems);
    } catch (err) {
      const errorMessage = handleAPIError(err);
      setError(errorMessage);
      console.error("Menu items fetch error:", err);
    } finally {
      setLoading(false);
    }
  };

  const toggleAvailability = async (itemId) => {
    try {
      const item = items.find((item) => item.id === itemId);
      if (!item) return;

      await menuAPI.updateMenuItem(itemId, {
        isOutOfStock: item.available, // Toggle the availability
      });

      // Update local state
      setItems(
        items.map((item) =>
          item.id === itemId ? { ...item, available: !item.available } : item
        )
      );
    } catch (err) {
      const errorMessage = handleAPIError(err);
      console.error("Toggle availability error:", err);
      alert(`Failed to update item availability: ${errorMessage}`);
    }
  };

  const handleAddItem = async (newItem) => {
    try {
      // Remove the id field as it will be generated by the server
      const { id, ...itemData } = newItem;

      const response = await menuAPI.addMenuItem(itemData);
      const addedItem = formatMenuItemData(response.data);

      setItems((prevItems) => [addedItem, ...prevItems]);
      setIsModalOpen(false);
    } catch (err) {
      const errorMessage = handleAPIError(err);
      console.error("Add item error:", err);
      alert(`Failed to add item: ${errorMessage}`);
    }
  };

  const handleDeleteItem = async (itemId) => {
    if (!window.confirm("Are you sure you want to delete this item?")) {
      return;
    }

    try {
      await menuAPI.deleteMenuItem(itemId);
      setItems((prevItems) => prevItems.filter((item) => item.id !== itemId));
    } catch (err) {
      const errorMessage = handleAPIError(err);
      console.error("Delete item error:", err);
      alert(`Failed to delete item: ${errorMessage}`);
    }
  };

  const categories = [...new Set(items.map((item) => item.category))];

  const filteredItems = items.filter((item) => {
    const matchesCategory =
      filterCategory === "all" || item.category === filterCategory;
    const matchesAvailability =
      filterAvailability === "all" ||
      (filterAvailability === "available" && item.available) ||
      (filterAvailability === "unavailable" && !item.available);
    const matchesSearch =
      item.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      item.description.toLowerCase().includes(searchTerm.toLowerCase());

    return matchesCategory && matchesAvailability && matchesSearch;
  });

  if (loading) {
    return (
      <div className="restaurant-items">
        <div className="items-header">
          <div className="header-content">
            <h2>Restaurant Items</h2>
            <p>Manage your menu items and their availability</p>
          </div>
        </div>
        <div className="loading-container">
          <div className="loading-spinner"></div>
          <p>Loading menu items...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="restaurant-items">
        <div className="items-header">
          <div className="header-content">
            <h2>Restaurant Items</h2>
            <p>Manage your menu items and their availability</p>
          </div>
        </div>
        <div className="error-container">
          <div className="error-icon">‚ö†Ô∏è</div>
          <h3>Error Loading Menu Items</h3>
          <p>{error}</p>
          <button className="btn btn--primary" onClick={fetchMenuItems}>
            Retry
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="restaurant-items">
      <div className="items-header">
        <div className="header-content">
          <h2>Restaurant Items</h2>
          <p>Manage your menu items and their availability</p>
        </div>
        <div className="header-actions">
          <button
            className="btn btn--primary"
            onClick={() => setIsModalOpen(true)}
          >
            Add New Item
          </button>
        </div>
      </div>

      <div className="filters-section">
        <div className="search-box">
          <input
            type="text"
            placeholder="Search items..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="search-input"
          />
        </div>

        <div className="filter-controls">
          <select
            value={filterCategory}
            onChange={(e) => setFilterCategory(e.target.value)}
            className="filter-select"
          >
            <option value="all">All Categories</option>
            {categories.map((category) => (
              <option key={category} value={category}>
                {category}
              </option>
            ))}
          </select>

          <select
            value={filterAvailability}
            onChange={(e) => setFilterAvailability(e.target.value)}
            className="filter-select"
          >
            <option value="all">All Items</option>
            <option value="available">Available</option>
            <option value="unavailable">Unavailable</option>
          </select>
        </div>
      </div>

      <div className="items-grid">
        {filteredItems.map((item) => (
          <div
            key={item.id}
            className={`item-card ${!item.available ? "unavailable" : ""}`}
          >
            <div className="item-header">
              <div className="item-image">
                {item.image ? (
                  <img src={item.image} alt={item.name} />
                ) : (
                  <span>üçΩÔ∏è</span>
                )}
              </div>
              <div className="item-info">
                <h3 className="item-name">{item.name}</h3>
                <span className="item-category">{item.category}</span>
              </div>
              <div className="item-price">‚Çπ{item.price}</div>
            </div>

            <div className="item-description">{item.description}</div>

            <div className="item-details">
              <div className="detail-item">
                <span className="detail-label">Prep Time:</span>
                <span className="detail-value">{item.preparationTime} min</span>
              </div>
              <div className="detail-item">
                <span className="detail-label">Status:</span>
                <span
                  className={`status-badge ${
                    item.available ? "available" : "unavailable"
                  }`}
                >
                  {item.available ? "Available" : "Unavailable"}
                </span>
              </div>
              {item.allergens && item.allergens.length > 0 && (
                <div className="detail-item">
                  <span className="detail-label">Allergens:</span>
                  <span className="detail-value">
                    {item.allergens.join(", ")}
                  </span>
                </div>
              )}
              {item.nutritionalInfo && item.nutritionalInfo.calories && (
                <div className="detail-item">
                  <span className="detail-label">Calories:</span>
                  <span className="detail-value">
                    {item.nutritionalInfo.calories} kcal
                  </span>
                </div>
              )}
            </div>

            <div className="item-actions">
              <div className="availability-toggle">
                <label className="toggle-switch">
                  <input
                    type="checkbox"
                    checked={item.available}
                    onChange={() => toggleAvailability(item.id)}
                  />
                  <span className="slider"></span>
                </label>
                <span className="toggle-label">
                  {item.available ? "Available" : "Unavailable"}
                </span>
              </div>

              <div className="action-buttons">
                <button className="btn btn--secondary btn-sm">Edit</button>
                <button
                  className="btn btn--danger btn-sm"
                  onClick={() => handleDeleteItem(item.id)}
                >
                  Delete
                </button>
              </div>
            </div>
          </div>
        ))}
      </div>

      {filteredItems.length === 0 && (
        <div className="no-items">
          <div className="no-items-icon">üçΩÔ∏è</div>
          <h3>No items found</h3>
          <p>There are no items matching your current filters.</p>
        </div>
      )}

      <AddItemModal
        isOpen={isModalOpen}
        onClose={() => setIsModalOpen(false)}
        onAddItem={handleAddItem}
      />
    </div>
  );
};

export default RestaurantItems;
